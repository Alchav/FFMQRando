@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO;
@using System;
@using System.Web
@using FFMQLib;
@using Microsoft.JSInterop;
@using Microsoft.JSInterop.WebAssembly;
@using Blazorise.Components;
@using RomUtilities;
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<style>
    body {

        background: linear-gradient(rgba(27,42,81,1),rgba(85,109,171,1)) no-repeat center fixed;
        background-size: cover;
    }
</style>

<div class="center-logo"><img height=100 src="@titleLetters[0]" /><img height=100 src="@titleLetters[1]" /><img height=100 src="@titleLetters[2]" /><img height=100 src="@titleLetters[3]" /><img height=100 src="@titleLetters[4]" /><img height=100 src="@titleLetters[5]" /><img height=100 src="logo/mqlogo_.png" /><img height=100 src="@titleLetters[6]" /><img height=100 src="@titleLetters[7]" /><img height=100 src="@titleLetters[8]" /><img height=100 src="@titleLetters[9]" /><img height=100 src="@titleLetters[10]" /></div>
<h5 class="text-secondary text-center">A FFMQ Randomizer</h5>
<h6 class="text-secondary text-center">@("v" + @FFMQLib.Metadata.Version)</h6>

<div><br /><br /><br /></div>

<h3 id="fileSection" class="text-secondary">File</h3>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">ROM</FieldLabel> 
    <FileEdit Filter="*.sfc" AutoReset="false" Changed="@LoadFiles"></FileEdit>
    <FieldHelp>@romMessage</FieldHelp>
</Field>
<Fields>
    <Field>
        <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Seed</FieldLabel> 
        <TextEdit Placeholder="Seed" Text="@showSeed" FocusOut="@OnSeedLoseFocus" TextChanged="@OnChangeSeed"/>
        <FieldHelp>@seedMessage</FieldHelp>
    </Field>
     <Field>
        <FieldLabel Visibility="Visibility.Invisible">None</FieldLabel>
        <Button Color="Color.Primary" Clicked="@RollSeed" class="field-button">Roll Seed</Button>
    </Field>
</Fields>
<Fields>
    <Field>
        <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Flag String</FieldLabel> 
        <TextEdit Placeholder="Flag string" Text="@flagString" TextChanged="@OnNameChanged"/>
        <FieldHelp>@flagsMessage</FieldHelp>
    </Field>
</Fields>

<Field>
    <Button Color="Color.Primary" Loading="@isGenerating" Clicked="@OnGenerate" Disabled="@isLoadingRom">Generate</Button>
</Field>

<div><br /><br /><br /></div>
<h3 id="optionsSection" class="text-secondary">Options</h3>

<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Items Shuffling</FieldLabel> 
    <Select @bind-SelectedValue="@flags.ItemShuffle">
        @foreach(var item in Enum.GetValues<FFMQLib.ItemShuffle>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.RandomStartingWeapon"><Text TextColor="TextColor.Secondary" class="fw-bold">Random Starting Weapon</Text></Switch>
</Field>
<Field>
    <Switch TValue="bool" @bind-Checked="@flags.ShuffleEnemiesPosition"><Text TextColor="TextColor.Secondary" class="fw-bold">Shuffle Enemies' Positions</Text></Switch>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Enemies Density</FieldLabel> 
    <Select @bind-SelectedValue="@flags.EnemiesDensity">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesDensity>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Enemies' Stats Scaling</FieldLabel> 
    <Select @bind-SelectedValue="@flags.EnemiesScaling">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesScaling>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Scaling Spread</FieldLabel> 
    <Select @bind-SelectedValue="@flags.EnemiesScalingSpread">
        @foreach(var item in Enum.GetValues<FFMQLib.EnemiesScalingSpread>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Leveling Curve</FieldLabel> 
    <Select @bind-SelectedValue="@flags.LevelingCurve">
        @foreach(var item in Enum.GetValues<FFMQLib.LevelingCurve>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>
<Field>
    <FieldLabel TextColor="TextColor.Secondary" class="fw-bold">Battlefields Battles Quantity</FieldLabel> 
    <Select @bind-SelectedValue="@flags.BattlesQuantity">
        @foreach(var item in Enum.GetValues<FFMQLib.BattlesQty>())
        {
            <SelectItem Value="@item">@(item.GetDescription())</SelectItem>
        }
    </Select>
</Field>

<div><br /><br /><br /></div>

<Information />

<div><br /><br /><br /><br /><br /></div>

@code{
    //bool IntroPaneVisible = true;
    //bool FilePaneVisible = false;
    //bool MainPaneVisible = false;
    //bool ExtPaneVisible = false;

    private FFMQRom newRom = new();
    private long maxFileSize = 0x80200;
    private bool isLoadingRom = false;
    private bool isGenerating = false;

    private Blob seed = new byte[4];
    private string showSeed;
    private Flags flags = new();
    private bool generatedRom = false;
    private string seedMessage = "";
    private string romMessage = "";
    private string flagsMessage = "";
    private List<string> titleLetters = new List<string> { "logo/mqlogoM.png", "logo/mqlogoy.png", "logo/mqlogos.png", "logo/mqlogot.png", "logo/mqlogoi.png", "logo/mqlogoc.png", "logo/mqlogoQ.png", "logo/mqlogou.png", "logo/mqlogoe.png", "logo/mqlogos2.png", "logo/mqlogot2.png" };

    [Parameter]
    public string flagString
    {
        get
        {
            var tempString = flags.GenerateFlagString();
            UpdateUrl();
            return tempString;
        }
        set
        {
            SetFlags(value);
            UpdateUrl();
        }
    }

    private async Task OnGenerate()
    {
        isGenerating = true;
        StateHasChanged();
        await Task.Delay(1);
        await Generate();
        isGenerating = false;
    }

    private async Task Generate()
    {
        if (newRom.IsEmpty())
        {
            romMessage = "No file.";
            return;
        }

        if (generatedRom)
        {
            newRom.RestoreOriginalData();
            generatedRom = false;
        }

        if (!newRom.Validate())
        {
            romMessage = "Invalid ROM file.";
            return;
        }

        try
        {            
            newRom.Randomize(seed, flags);

            romMessage = "ROM file generated successfully.";

            var fs = newRom.DataStream();
            var fileName = "FFMQR_" + seed.ToHex() + ".sfc";

            using var streamRef = new DotNetStreamReference(stream: fs);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            romMessage = ex.Message;
        }

        generatedRom = true;
    }

    private async Task LoadFiles(FileChangedEventArgs e)
    {
        romMessage = "Loading...";
        isLoadingRom = true;
        StateHasChanged();
        try
        {
            await newRom.LoadAsync(e.Files.First().OpenReadStream(maxFileSize));
            if (!newRom.Validate())
            {
                romMessage = "Invalid ROM file.";
                isLoadingRom = false;
                return;
            }
            else
            {
                romMessage = "ROM file loaded succesfully.";
                isLoadingRom = false;
                newRom.BackupOriginalData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void RollSeed()
    {
        var rng = new Random();
        rng.NextBytes(seed);
        MT19337 rng2 = new MT19337((uint)seed.ToUInts().Sum(x => x));
        titleLetters.Shuffle(rng2);
        showSeed = seed.ToHex();
        UpdateUrl();
    }

    private void UpdateUrl()
    { 
        var uri = new Uri(NavigationManager.Uri);

        var test = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object>
        {
         { "s", showSeed },
         { "f", flags.GenerateFlagString() }
        });

        NavigationManager.NavigateTo(test);
    }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        //string seed;

        try { 
            var seedParameter = HttpUtility.ParseQueryString(uri.Query).Get("s");
            SetSeed(seedParameter);
        }
        catch
        {
            RollSeed();
        }

        var flagsParameter = HttpUtility.ParseQueryString(uri.Query).Get("f");
        if (flagsParameter != null)
        {
            SetFlags(flagsParameter);                
        }
    }

    Task OnChangeSeed(string value)
    {
        SetSeed(value);
        UpdateUrl();
        return Task.CompletedTask;
    }

    Task SetSeed(string value)
    { 
        showSeed = value;

        if (showSeed.Length <= 8)
        {
            try
            {
                showSeed = showSeed.PadLeft(8, '0');
                seed = Blob.FromHex(showSeed);
                seedMessage = "";
            }
            catch (Exception ex)
            {
                seedMessage = "Invalid Seed: " + ex.Message;
            }
        }
        else
        {
            seedMessage = "Invalid Seed: Seed string is too long (max 8 digits).";
        }
        return Task.CompletedTask;
    }

    Task OnSeedLoseFocus()
    {
        showSeed = showSeed.PadLeft(8, '0');
        UpdateUrl();
        return Task.CompletedTask;
    }

    private async Task CopyTextToClipboard()
    {
        await JS.InvokeVoidAsync("copyClipboard");
    }

    Task OnNameChanged( string value )
    {
        SetFlags(value);
        UpdateUrl();
        return Task.CompletedTask;
    }

    Task SetFlags( string value )
    {
        try
        {
            flags.ReadFlagString(value);
            flagsMessage = "Flags loaded successfully.";
            UpdateUrl();
        }
        catch (Exception)
        {
            flagsMessage = "Invalid flags string.";
        }

        return Task.CompletedTask;
    }
}
